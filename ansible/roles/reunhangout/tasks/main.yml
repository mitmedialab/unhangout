---
- name: Create postgres pg_trgm extension
  command: docker exec postgres psql -U postgres {{django_postgres_db}} -c "CREATE EXTENSION IF NOT EXISTS pg_trgm;"

- name: setup static and media file hosting through nginx-proxy
  template: src=static.j2 dest=/var/docker-volumes/nginx/vhosts.d/{{django_domain}}

- set_fact:
    proxy_vars:
      VIRTUAL_HOST: "{{django_domain}}"
      LETSENCRYPT_HOST: "{{django_domain}}"
      LETSENCRYPT_EMAIL: "admin@code27.org"

- set_fact:
    app_vars:
      DOMAIN: "{{django_domain}}"
      SECRET_KEY: "{{django_secret_key}}"
      ADMIN_EMAIL: "{{admin_email}}"
      POSTGRES_HOST: postgres 
      POSTGRES_DB: "{{django_postgres_db}}"
      POSTGRES_USER: "{{django_postgres_user}}"
      POSTGRES_PASSWORD: "{{django_postgres_password}}"
      POSTGRES_PORT: "5432"
      MEMCACHED_HOST: memcached
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      BROKER_URL: redis://redis:6379/0
      YOUTUBE_API_KEY: "{{youtube_api_key}}"
      ETHERPAD_SERVER: "https://{{django_domain}}/{{uh_etherpad_domain}}"
      EMAIL_HOST: "{{mailgun_smtp_hostname}}"
      EMAIL_HOST_USER: "{{mailgun_smtp_login}}"
      EMAIL_HOST_PASSWORD: "{{mailgun_smtp_password}}"
      MAILGUN_ACTIVE_API_KEY: "{{mailgun_active_api_key}}"
      ETHERPAD_API_KEY: "{{uh_etherpad_api_key}}"
      TWITTER_CLIENT_ID: "{{twitter_client_id}}"
      TWITTER_SECRET: "{{twitter_secret}}"
      FACEBOOK_CLIENT_ID: "{{facebook_client_id}}"
      FACEBOOK_SECRET: "{{facebook_secret}}"
      GOOGLE_CLIENT_ID: "{{google_client_id}}"
      GOOGLE_SECRET: "{{google_secret}}"
      GA_TRACKING_ID: "{{ga_tracking_id}}"

- set_fact:
    uvicorn_vars:
      FORWARDED_ALLOW_IPS: "nginx-proxy"
      WEB_CONCURRENCY: "3"

- name: Create folder for celery with correct permissions
  file: path=/var/docker-volumes/{{django_domain}}/celery owner=5313 group=5313 state=directory

- name: Run docker container for django http & ws service
  docker_container:
    name: "{{django_domain}}"
    image: dirkcuys/unhangout:latest
    state: started
    #pull: yes # TODO
    recreate: true
    restart: yes
    restart_policy: always
    volumes:
    - "/var/docker-volumes/nginx/static/{{django_domain}}/static:/opt/app/public"
    - "/var/docker-volumes/nginx/static/{{django_domain}}/media:/opt/app/media"
    - "/var/docker-volumes/{{django_domain}}/celery:/var/lib/celery"
    - "/var/docker-volumes/{{django_domain}}/log:/var/log"
    links:
    - postgres
    - redis
    - memcached
    env: "{{ proxy_vars | combine(app_vars) | combine(uvicorn_vars) }}"

- name: Run docker container for celery worker
  docker_container:
    name: "{{django_domain}}-celery"
    image: dirkcuys/unhangout:latest
    command: /opt/app-venv/bin/celery worker -A reunhangout
    user: celery
    state: started
    #pull: yes # TODO
    recreate: true
    restart: yes
    restart_policy: always
    volumes:
    - "/var/docker-volumes/nginx/static/{{django_domain}}/static:/opt/app/public"
    - "/var/docker-volumes/nginx/static/{{django_domain}}/media:/opt/app/media"
    - "/var/docker-volumes/{{django_domain}}/celery:/var/lib/celery"
    - "/var/docker-volumes/{{django_domain}}/log:/var/log"
    links:
    - postgres
    - redis
    - memcached
    env: "{{app_vars}}"


- name: Run docker container for celery beat worker
  docker_container:
    name: "{{django_domain}}-celerybeat"
    image: dirkcuys/unhangout:latest
    command: /opt/app-venv/bin/celery beat -A reunhangout --schedule=/var/lib/celery/celerybeat-schedule --pidfile=/var/lib/celery/celerybeat.pid
    user: celery
    state: started
    #pull: yes # TODO
    recreate: true
    restart: yes
    restart_policy: always
    volumes:
    - "/var/docker-volumes/nginx/static/{{django_domain}}/static:/opt/app/public"
    - "/var/docker-volumes/nginx/static/{{django_domain}}/media:/opt/app/media"
    - "/var/docker-volumes/{{django_domain}}/celery:/var/lib/celery"
    - "/var/docker-volumes/{{django_domain}}/log:/var/log"
    links:
    - postgres
    - redis
    - memcached
    env: "{{app_vars}}"
